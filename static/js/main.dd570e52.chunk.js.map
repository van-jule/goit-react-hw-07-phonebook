{"version":3,"sources":["components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","contacts","data","addContact","name","number","post","response","deleteContact","contactId","delete","console","log","fulfilled","items","createReducer","payload","state","filter","id","loading","pending","rejected","error","combineReducers","getContacts","getFilter","getFilteredContacts","normalizedFilter","toLowerCase","contact","includes","isLoadingContacts","Form","useState","setState","useSelector","contactsSelectors","dispatch","useDispatch","nameInputId","shortid","generate","telInputId","handleChange","e","currentTarget","value","prevState","reset","className","styles","form","onSubmit","preventDefault","find","alert","contactsOperations","label","htmlFor","input","type","pattern","title","required","onChange","button","memo","ContactsList","loaderContacts","useEffect","length","list","map","item","onClick","onDeleteContact","defaultProps","Filter","contactsActions","target","App","middleware","storage","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd570e52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__bZmfy\",\"item\":\"ContactsList_item__1f_IU\",\"button\":\"ContactsList_button__3vENl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1239a\",\"input\":\"Filter_input__3DUDH\"};","// import shortid from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactRequest\"\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  \"contacts/fetchContactSuccess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/addContactError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"contacts/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contacts/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\nexport const changeFilter = createAction(\"contacts/Filter\");\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"https://6197aefa164fa60017c22d4f.mockapi.io/contacts\";\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  \"contacts/fetchContacts\",\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const contacts = await axios.get(\"./contacts\");\r\n      return contacts.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// const fetchContacts = () => async (dispatch) => {\r\n//   dispatch(fetchContactsRequest);\r\n\r\n//   try {\r\n//     const { data } = await axios.get(\"./contacts\");\r\n//     dispatch(fetchContactsSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsError(error));\r\n//   }\r\n\r\n//   //   axios\r\n//   //     .get(\"./contacts\")\r\n//   //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//   //     .catch((error) => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\n// const addContact =\r\n//   ({ name, number }) =>\r\n//   (dispatch) => {\r\n//     const contact = { name, number };\r\n\r\n//     dispatch(addContactRequest());\r\n\r\n//     axios\r\n//       .post(\"/contacts\", contact)\r\n//       .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//       .catch((error) => dispatch(addContactError(error)));\r\n//   };\r\n\r\nexport const addContact = createAsyncThunk(\r\n  \"contacts/addContact\",\r\n  async ({ name, number }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post(\"/contacts\", { name, number });\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  \"contact/deleteContact\",\r\n  async (contactId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.delete(`contacts/${contactId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// export const deleteContact = (contactId) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`contacts/${contactId}`)\r\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch((error) => dispatch(deleteContactError(error)));\r\n// };\r\n","// import { combineReducers } from \"redux\";\r\nimport { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { changeFilter } from \"./contacts-actions\";\r\nimport {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from \"./contacts-operations\";\r\n\r\nconst initialStateItems = [];\r\nconsole.log(\"addContact.fulfilled\", addContact.fulfilled);\r\nconst items = createReducer(initialStateItems, {\r\n  [fetchContacts.fulfilled]: (_, { payload }) => {\r\n    console.log(\"payload in reducer\", payload);\r\n    console.log(\"fetchContacts.fulfilled\", fetchContacts.fulfilled);\r\n    return payload;\r\n  },\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload.id),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContacts.rejected]: (_, { payload }) => payload,\r\n  [fetchContacts.pending]: () => null,\r\n  [addContact.rejected]: (_, { payload }) => payload,\r\n  [deleteContact.rejected]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getFilteredContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = state.contacts.filter;\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nexport const isLoadingContacts = (state) => state.contacts.loading;\r\n","import React, { useState, memo } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { contactsSelectors, contactsOperations } from \"redux/contacts\";\r\nimport styles from \"./Form.module.css\";\r\n\r\nconst Form = () => {\r\n  const [state, setState] = useState({ name: \"\", number: \"\" });\r\n\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const nameInputId = shortid.generate();\r\n  const telInputId = shortid.generate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (contacts.find(({ name }) => name === state.name)) {\r\n      alert(`${state.name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsOperations.addContact(state));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label className={styles.label} htmlFor={nameInputId}>\r\n        Name\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={state.name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.label} htmlFor={telInputId}>\r\n        Number\r\n        <input\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={state.number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleChange}\r\n          id={telInputId}\r\n        />\r\n      </label>\r\n      <button className={styles.button} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (info) => dispatch(contactsActions.addContact(info)),\r\n// });\r\n\r\nexport default memo(Form);\r\n","import React from \"react\";\r\nimport styles from \"./ContactsList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n// import { connect } from \"react-redux\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { contactsSelectors, contactsOperations } from \"redux/contacts\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function ContactsList() {\r\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\r\n  const loaderContacts = useSelector(contactsSelectors.isLoadingContacts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = (id) =>\r\n    dispatch(contactsOperations.deleteContact(id));\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {loaderContacts && <h1>Загружаем...</h1>}\r\n      {contacts.length === 0 ? (\r\n        <div> No contacts </div>\r\n      ) : (\r\n        <ul className={styles.list}>\r\n          {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className={styles.item}>\r\n              {name}: {number}\r\n              <button\r\n                className={styles.button}\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nContactsList.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nContactsList.propTypes = {\r\n  onDeleteContact: PropTypes.func,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: getFilteredContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from \"react\";\r\nimport styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { contactsSelectors, contactsActions } from \"redux/contacts\";\r\n\r\n// import { changeFilter } from \"../../redux/contacts/contacts-actions\";\r\n// import { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={styles.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.defaultProps = {\r\n  value: \"\",\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\nexport default Filter;\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import Form from \"./components/Form\";\r\nimport ContactsList from \"./components/ContactsList\";\r\nimport Filter from \"./components/Filter\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <h1>Phonebook</h1>\r\n    <Form />\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n    <ContactsList />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\nimport {\r\n  // persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n// import { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./App\";\r\nimport store from \"../src/redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <Provider store={store.store}> */}\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3uGWR\",\"label\":\"Form_label__17cXu\",\"input\":\"Form_input__2S9BS\",\"button\":\"Form_button__1UCTw\"};"],"sourceRoot":""}